"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/embla-carousel-autoplay";
exports.ids = ["vendor-chunks/embla-carousel-autoplay"];
exports.modules = {

/***/ "(ssr)/../../node_modules/embla-carousel-autoplay/esm/embla-carousel-autoplay.esm.js":
/*!*************************************************************************************!*\
  !*** ../../node_modules/embla-carousel-autoplay/esm/embla-carousel-autoplay.esm.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Autoplay)\n/* harmony export */ });\nconst defaultOptions = {\n  active: true,\n  breakpoints: {},\n  delay: 4000,\n  jump: false,\n  playOnInit: true,\n  stopOnFocusIn: true,\n  stopOnInteraction: true,\n  stopOnMouseEnter: false,\n  stopOnLastSnap: false,\n  rootNode: null\n};\n\nfunction Autoplay(userOptions = {}) {\n  let options;\n  let emblaApi;\n  let destroyed;\n  let playing = false;\n  let wasPlaying = false;\n  let jump = false;\n  let animationFrame = 0;\n  let timer = 0;\n  function init(emblaApiInstance, optionsHandler) {\n    emblaApi = emblaApiInstance;\n    if (emblaApi.scrollSnapList().length <= 1) return;\n    const {\n      mergeOptions,\n      optionsAtMedia\n    } = optionsHandler;\n    const optionsBase = mergeOptions(defaultOptions, Autoplay.globalOptions);\n    const allOptions = mergeOptions(optionsBase, userOptions);\n    options = optionsAtMedia(allOptions);\n    jump = options.jump;\n    destroyed = false;\n    const {\n      eventStore,\n      ownerDocument\n    } = emblaApi.internalEngine();\n    const emblaRoot = emblaApi.rootNode();\n    const root = options.rootNode && options.rootNode(emblaRoot) || emblaRoot;\n    emblaApi.on('pointerDown', clearTimer);\n    if (!options.stopOnInteraction) emblaApi.on('pointerUp', startTimer);\n    if (options.stopOnMouseEnter) {\n      eventStore.add(root, 'mouseenter', clearTimer);\n      if (!options.stopOnInteraction) {\n        eventStore.add(root, 'mouseleave', startTimer);\n      }\n    }\n    if (options.stopOnFocusIn) {\n      eventStore.add(root, 'focusin', clearTimer);\n      if (!options.stopOnInteraction) {\n        eventStore.add(root, 'focusout', startTimer);\n      }\n    }\n    eventStore.add(ownerDocument, 'visibilitychange', () => {\n      if (ownerDocument.visibilityState === 'hidden') {\n        wasPlaying = playing;\n        return clearTimer();\n      }\n      if (wasPlaying) startTimer();\n    });\n    if (options.playOnInit) {\n      emblaApi.on('init', startTimer).on('reInit', startTimer);\n    }\n  }\n  function destroy() {\n    destroyed = true;\n    playing = false;\n    emblaApi.off('init', startTimer).off('reInit', startTimer);\n    emblaApi.off('pointerDown', clearTimer);\n    if (!options.stopOnInteraction) emblaApi.off('pointerUp', startTimer);\n    clearTimer();\n    cancelAnimationFrame(animationFrame);\n    animationFrame = 0;\n  }\n  function startTimer() {\n    if (destroyed) return;\n    if (!playing) emblaApi.emit('autoplay:play');\n    const {\n      ownerWindow\n    } = emblaApi.internalEngine();\n    ownerWindow.clearInterval(timer);\n    timer = ownerWindow.setInterval(next, options.delay);\n    playing = true;\n  }\n  function clearTimer() {\n    if (destroyed) return;\n    if (playing) emblaApi.emit('autoplay:stop');\n    const {\n      ownerWindow\n    } = emblaApi.internalEngine();\n    ownerWindow.clearInterval(timer);\n    timer = 0;\n    playing = false;\n  }\n  function play(jumpOverride) {\n    if (typeof jumpOverride !== 'undefined') jump = jumpOverride;\n    startTimer();\n  }\n  function stop() {\n    if (playing) clearTimer();\n  }\n  function reset() {\n    if (playing) play();\n  }\n  function isPlaying() {\n    return playing;\n  }\n  function next() {\n    animationFrame = requestAnimationFrame(() => {\n      const {\n        index\n      } = emblaApi.internalEngine();\n      const nextIndex = index.clone().add(1).get();\n      const lastIndex = emblaApi.scrollSnapList().length - 1;\n      const kill = options.stopOnLastSnap && nextIndex === lastIndex;\n      if (kill) clearTimer();\n      if (emblaApi.canScrollNext()) {\n        emblaApi.scrollNext(jump);\n      } else {\n        emblaApi.scrollTo(0, jump);\n      }\n    });\n  }\n  const self = {\n    name: 'autoplay',\n    options: userOptions,\n    init,\n    destroy,\n    play,\n    stop,\n    reset,\n    isPlaying\n  };\n  return self;\n}\nAutoplay.globalOptions = undefined;\n\n\n//# sourceMappingURL=embla-carousel-autoplay.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL2VtYmxhLWNhcm91c2VsLWF1dG9wbGF5L2VzbS9lbWJsYS1jYXJvdXNlbC1hdXRvcGxheS5lc20uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUUrQjtBQUMvQiIsInNvdXJjZXMiOlsid2VicGFjazovL2NhcnRhLy4uLy4uL25vZGVfbW9kdWxlcy9lbWJsYS1jYXJvdXNlbC1hdXRvcGxheS9lc20vZW1ibGEtY2Fyb3VzZWwtYXV0b3BsYXkuZXNtLmpzPzgzNWYiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7XG4gIGFjdGl2ZTogdHJ1ZSxcbiAgYnJlYWtwb2ludHM6IHt9LFxuICBkZWxheTogNDAwMCxcbiAganVtcDogZmFsc2UsXG4gIHBsYXlPbkluaXQ6IHRydWUsXG4gIHN0b3BPbkZvY3VzSW46IHRydWUsXG4gIHN0b3BPbkludGVyYWN0aW9uOiB0cnVlLFxuICBzdG9wT25Nb3VzZUVudGVyOiBmYWxzZSxcbiAgc3RvcE9uTGFzdFNuYXA6IGZhbHNlLFxuICByb290Tm9kZTogbnVsbFxufTtcblxuZnVuY3Rpb24gQXV0b3BsYXkodXNlck9wdGlvbnMgPSB7fSkge1xuICBsZXQgb3B0aW9ucztcbiAgbGV0IGVtYmxhQXBpO1xuICBsZXQgZGVzdHJveWVkO1xuICBsZXQgcGxheWluZyA9IGZhbHNlO1xuICBsZXQgd2FzUGxheWluZyA9IGZhbHNlO1xuICBsZXQganVtcCA9IGZhbHNlO1xuICBsZXQgYW5pbWF0aW9uRnJhbWUgPSAwO1xuICBsZXQgdGltZXIgPSAwO1xuICBmdW5jdGlvbiBpbml0KGVtYmxhQXBpSW5zdGFuY2UsIG9wdGlvbnNIYW5kbGVyKSB7XG4gICAgZW1ibGFBcGkgPSBlbWJsYUFwaUluc3RhbmNlO1xuICAgIGlmIChlbWJsYUFwaS5zY3JvbGxTbmFwTGlzdCgpLmxlbmd0aCA8PSAxKSByZXR1cm47XG4gICAgY29uc3Qge1xuICAgICAgbWVyZ2VPcHRpb25zLFxuICAgICAgb3B0aW9uc0F0TWVkaWFcbiAgICB9ID0gb3B0aW9uc0hhbmRsZXI7XG4gICAgY29uc3Qgb3B0aW9uc0Jhc2UgPSBtZXJnZU9wdGlvbnMoZGVmYXVsdE9wdGlvbnMsIEF1dG9wbGF5Lmdsb2JhbE9wdGlvbnMpO1xuICAgIGNvbnN0IGFsbE9wdGlvbnMgPSBtZXJnZU9wdGlvbnMob3B0aW9uc0Jhc2UsIHVzZXJPcHRpb25zKTtcbiAgICBvcHRpb25zID0gb3B0aW9uc0F0TWVkaWEoYWxsT3B0aW9ucyk7XG4gICAganVtcCA9IG9wdGlvbnMuanVtcDtcbiAgICBkZXN0cm95ZWQgPSBmYWxzZTtcbiAgICBjb25zdCB7XG4gICAgICBldmVudFN0b3JlLFxuICAgICAgb3duZXJEb2N1bWVudFxuICAgIH0gPSBlbWJsYUFwaS5pbnRlcm5hbEVuZ2luZSgpO1xuICAgIGNvbnN0IGVtYmxhUm9vdCA9IGVtYmxhQXBpLnJvb3ROb2RlKCk7XG4gICAgY29uc3Qgcm9vdCA9IG9wdGlvbnMucm9vdE5vZGUgJiYgb3B0aW9ucy5yb290Tm9kZShlbWJsYVJvb3QpIHx8IGVtYmxhUm9vdDtcbiAgICBlbWJsYUFwaS5vbigncG9pbnRlckRvd24nLCBjbGVhclRpbWVyKTtcbiAgICBpZiAoIW9wdGlvbnMuc3RvcE9uSW50ZXJhY3Rpb24pIGVtYmxhQXBpLm9uKCdwb2ludGVyVXAnLCBzdGFydFRpbWVyKTtcbiAgICBpZiAob3B0aW9ucy5zdG9wT25Nb3VzZUVudGVyKSB7XG4gICAgICBldmVudFN0b3JlLmFkZChyb290LCAnbW91c2VlbnRlcicsIGNsZWFyVGltZXIpO1xuICAgICAgaWYgKCFvcHRpb25zLnN0b3BPbkludGVyYWN0aW9uKSB7XG4gICAgICAgIGV2ZW50U3RvcmUuYWRkKHJvb3QsICdtb3VzZWxlYXZlJywgc3RhcnRUaW1lcik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvcHRpb25zLnN0b3BPbkZvY3VzSW4pIHtcbiAgICAgIGV2ZW50U3RvcmUuYWRkKHJvb3QsICdmb2N1c2luJywgY2xlYXJUaW1lcik7XG4gICAgICBpZiAoIW9wdGlvbnMuc3RvcE9uSW50ZXJhY3Rpb24pIHtcbiAgICAgICAgZXZlbnRTdG9yZS5hZGQocm9vdCwgJ2ZvY3Vzb3V0Jywgc3RhcnRUaW1lcik7XG4gICAgICB9XG4gICAgfVxuICAgIGV2ZW50U3RvcmUuYWRkKG93bmVyRG9jdW1lbnQsICd2aXNpYmlsaXR5Y2hhbmdlJywgKCkgPT4ge1xuICAgICAgaWYgKG93bmVyRG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09PSAnaGlkZGVuJykge1xuICAgICAgICB3YXNQbGF5aW5nID0gcGxheWluZztcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZXIoKTtcbiAgICAgIH1cbiAgICAgIGlmICh3YXNQbGF5aW5nKSBzdGFydFRpbWVyKCk7XG4gICAgfSk7XG4gICAgaWYgKG9wdGlvbnMucGxheU9uSW5pdCkge1xuICAgICAgZW1ibGFBcGkub24oJ2luaXQnLCBzdGFydFRpbWVyKS5vbigncmVJbml0Jywgc3RhcnRUaW1lcik7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgZGVzdHJveWVkID0gdHJ1ZTtcbiAgICBwbGF5aW5nID0gZmFsc2U7XG4gICAgZW1ibGFBcGkub2ZmKCdpbml0Jywgc3RhcnRUaW1lcikub2ZmKCdyZUluaXQnLCBzdGFydFRpbWVyKTtcbiAgICBlbWJsYUFwaS5vZmYoJ3BvaW50ZXJEb3duJywgY2xlYXJUaW1lcik7XG4gICAgaWYgKCFvcHRpb25zLnN0b3BPbkludGVyYWN0aW9uKSBlbWJsYUFwaS5vZmYoJ3BvaW50ZXJVcCcsIHN0YXJ0VGltZXIpO1xuICAgIGNsZWFyVGltZXIoKTtcbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZShhbmltYXRpb25GcmFtZSk7XG4gICAgYW5pbWF0aW9uRnJhbWUgPSAwO1xuICB9XG4gIGZ1bmN0aW9uIHN0YXJ0VGltZXIoKSB7XG4gICAgaWYgKGRlc3Ryb3llZCkgcmV0dXJuO1xuICAgIGlmICghcGxheWluZykgZW1ibGFBcGkuZW1pdCgnYXV0b3BsYXk6cGxheScpO1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyV2luZG93XG4gICAgfSA9IGVtYmxhQXBpLmludGVybmFsRW5naW5lKCk7XG4gICAgb3duZXJXaW5kb3cuY2xlYXJJbnRlcnZhbCh0aW1lcik7XG4gICAgdGltZXIgPSBvd25lcldpbmRvdy5zZXRJbnRlcnZhbChuZXh0LCBvcHRpb25zLmRlbGF5KTtcbiAgICBwbGF5aW5nID0gdHJ1ZTtcbiAgfVxuICBmdW5jdGlvbiBjbGVhclRpbWVyKCkge1xuICAgIGlmIChkZXN0cm95ZWQpIHJldHVybjtcbiAgICBpZiAocGxheWluZykgZW1ibGFBcGkuZW1pdCgnYXV0b3BsYXk6c3RvcCcpO1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyV2luZG93XG4gICAgfSA9IGVtYmxhQXBpLmludGVybmFsRW5naW5lKCk7XG4gICAgb3duZXJXaW5kb3cuY2xlYXJJbnRlcnZhbCh0aW1lcik7XG4gICAgdGltZXIgPSAwO1xuICAgIHBsYXlpbmcgPSBmYWxzZTtcbiAgfVxuICBmdW5jdGlvbiBwbGF5KGp1bXBPdmVycmlkZSkge1xuICAgIGlmICh0eXBlb2YganVtcE92ZXJyaWRlICE9PSAndW5kZWZpbmVkJykganVtcCA9IGp1bXBPdmVycmlkZTtcbiAgICBzdGFydFRpbWVyKCk7XG4gIH1cbiAgZnVuY3Rpb24gc3RvcCgpIHtcbiAgICBpZiAocGxheWluZykgY2xlYXJUaW1lcigpO1xuICB9XG4gIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIGlmIChwbGF5aW5nKSBwbGF5KCk7XG4gIH1cbiAgZnVuY3Rpb24gaXNQbGF5aW5nKCkge1xuICAgIHJldHVybiBwbGF5aW5nO1xuICB9XG4gIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgYW5pbWF0aW9uRnJhbWUgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICBpbmRleFxuICAgICAgfSA9IGVtYmxhQXBpLmludGVybmFsRW5naW5lKCk7XG4gICAgICBjb25zdCBuZXh0SW5kZXggPSBpbmRleC5jbG9uZSgpLmFkZCgxKS5nZXQoKTtcbiAgICAgIGNvbnN0IGxhc3RJbmRleCA9IGVtYmxhQXBpLnNjcm9sbFNuYXBMaXN0KCkubGVuZ3RoIC0gMTtcbiAgICAgIGNvbnN0IGtpbGwgPSBvcHRpb25zLnN0b3BPbkxhc3RTbmFwICYmIG5leHRJbmRleCA9PT0gbGFzdEluZGV4O1xuICAgICAgaWYgKGtpbGwpIGNsZWFyVGltZXIoKTtcbiAgICAgIGlmIChlbWJsYUFwaS5jYW5TY3JvbGxOZXh0KCkpIHtcbiAgICAgICAgZW1ibGFBcGkuc2Nyb2xsTmV4dChqdW1wKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVtYmxhQXBpLnNjcm9sbFRvKDAsIGp1bXApO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGNvbnN0IHNlbGYgPSB7XG4gICAgbmFtZTogJ2F1dG9wbGF5JyxcbiAgICBvcHRpb25zOiB1c2VyT3B0aW9ucyxcbiAgICBpbml0LFxuICAgIGRlc3Ryb3ksXG4gICAgcGxheSxcbiAgICBzdG9wLFxuICAgIHJlc2V0LFxuICAgIGlzUGxheWluZ1xuICB9O1xuICByZXR1cm4gc2VsZjtcbn1cbkF1dG9wbGF5Lmdsb2JhbE9wdGlvbnMgPSB1bmRlZmluZWQ7XG5cbmV4cG9ydCB7IEF1dG9wbGF5IGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVtYmxhLWNhcm91c2VsLWF1dG9wbGF5LmVzbS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/embla-carousel-autoplay/esm/embla-carousel-autoplay.esm.js\n");

/***/ })

};
;