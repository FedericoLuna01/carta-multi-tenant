generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  sessions      Session[]
  role          UserRole  @default(USER)
  slug          String    @unique
  isActive      Boolean   @default(true)

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  UserSettings  UserSettings? @relation("UserToUserSettings")
  categories    Category[]    @relation("CategoryToUser")
  subcategories Subcategory[] @relation("SubcategoryToUser")
  products      Product[]     @relation("ProductToUser")
  orders        Order[]       @relation("OrderToUser")
}

enum UserRole {
  USER
  ADMIN
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model UserSettings {
  id             String  @id @default(uuid())
  dayOpenTime    String
  dayCloseTime   String
  nightOpenTime  String
  nightCloseTime String
  table          Boolean
  delivery       Boolean
  takeaway       Boolean
  location       String
  phone          String
  image          String

  userId String @unique
  user   User   @relation("UserToUserSettings", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Product {
  id            String      @id @default(uuid())
  name          String
  description   String?
  price         Float
  image         String
  sizes         Size[]      @relation("SizeToProduct")
  extras        Extra[]     @relation("ExtraToProduct")
  subcategoryId String
  subcategory   Subcategory @relation("SubcategoryToProduct", fields: [subcategoryId], references: [id])
  orderItems    OrderItem[] @relation("OrderItemToProduct")
  isArchived    Boolean     @default(false)
  isPromo       Boolean     @default(false)
  promoPrice    Float?
  sort          Int
  lastChange    Json?
  userId        String
  user          User        @relation("ProductToUser", fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([subcategoryId])
  @@index([userId])
}

model Size {
  id        String   @id @default(uuid())
  name      String
  price     Float
  productId String
  product   Product  @relation("SizeToProduct", fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Extra {
  id        String   @id @default(uuid())
  name      String
  price     Float
  productId String
  product   Product  @relation("ExtraToProduct", fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Category {
  id            String        @id @default(uuid())
  name          String
  subcategories Subcategory[] @relation("SubcategoryToCategory")
  sort          Int
  userId        String
  user          User          @relation("CategoryToUser", fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Subcategory {
  id         String    @id @default(uuid())
  name       String
  categoryId String
  category   Category  @relation("SubcategoryToCategory", fields: [categoryId], references: [id])
  products   Product[] @relation("SubcategoryToProduct")
  sort       Int
  userId     String
  user       User      @relation("SubcategoryToUser", fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@index([userId])
}

model Order {
  id       Int         @id @default(autoincrement())
  name     String
  phone    String
  place    String?
  comment  String?
  type     OrderType
  status   OrderStatus @default(PENDING)
  products OrderItem[] @relation("OrderItemToOrder")
  userId   String
  user     User        @relation("OrderToUser", fields: [userId], references: [id])
  // payment  OrderPayment

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

// TODO: add payment method
// enum OrderPayment {
//   CASH
//   CARD
//   QR
// }

enum OrderType {
  DELIVERY
  TABLE
  TAKEAWAY
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  ON_THE_WAY
  PAID
  READY
  DONE
  CANCELED
}

model OrderItem {
  id        String           @id @default(uuid())
  productId String
  product   Product          @relation("OrderItemToProduct", fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  options   String?
  extras    OrderItemExtra[] @relation("OrderItemExtraToOrderItem")
  size      OrderItemSize?
  orderId   Int
  order     Order            @relation("OrderItemToOrder", fields: [orderId], references: [id], onDelete: Cascade)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@index([orderId])
  @@index([productId])
}

model OrderItemExtra {
  id          String    @id @default(uuid())
  name        String
  price       Float
  orderItemId String
  orderItem   OrderItem @relation("OrderItemExtraToOrderItem", fields: [orderItemId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([orderItemId])
}

model OrderItemSize {
  id          String    @id @default(uuid())
  name        String
  price       Float
  orderItemId String    @unique
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([orderItemId])
}
